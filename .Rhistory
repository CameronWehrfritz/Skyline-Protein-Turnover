O0new <- df.binom1[median.pp, 1]*df.loop[, "Area1"]/df.binom1[median.pp, 2]
# calculate percent new synthesized: % new synthesized = (Obs0new + Obs1 + Obs2)/(Obs0 + Obs1 + Obs2)
perc.new.synth.one.l[i] <- (O0new + df.loop[, "Area1"])/(df.loop[, "Area0"] + df.loop[, "Area1"])
}
# add column onto data frame
df.areas.one.l <- df.areas.one.l %>%
cbind("Perc.New.Synth"=perc.new.synth.one.l)
####
df.areas.one.l <- df.areas.one.l %>%
arrange(Timepoint)
# write ou
View(df.areas.one.l)
unique(df.pp.medians$Condition)
factor(df.pp.medians$Condition)
boxplot.oneleucine.percentnewsynth <- df.areas.one.l %>%
ggplot(aes(y=Perc.New.Synth, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_boxplot(aes(y=Perc.New.Synth, col=Condition, alpha=0.1)) +
labs(title="Percent Newly Sythnesized Distribution by Condition - Peptides with 1 Leucine", x="Condition", y="Percent Newly Synthesized") +
theme_bw()
ggsave("Boxplot_percent-newly-synthesized_single-leucine-peptides.pdf",
plot = boxplot.oneleucine.percentnewsynth,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
df.areas.one.l %>%
ggplot(aes(y=Perc.New.Synth, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_boxplot(aes(y=Perc.New.Synth, col=Condition, alpha=0.1), show.legend = FALSE) +
labs(title="Percent Newly Sythnesized Distribution by Condition - Peptides with 1 Leucine", x="Condition", y="Percent Newly Synthesized") +
theme_bw()
df.precursor.pool %>%
ggplot(aes(x=Precursor.Pool, fill=Condition)) +
geom_histogram(aes(y=..density..), alpha=0.2, col="black", position='identity') +
geom_density(alpha=0.2) +
geom_vline(data=df.pp.medians, aes(xintercept=Precursor.Pool, col=Condition), linetype="dashed", show.legend=FALSE) +
labs(title="Precursor Pool Distrubtion by Condition", x="Precursor Pool", y="Density") +
theme_bw()
df.precursor.pool %>%
ggplot(aes(x=Precursor.Pool, fill=Condition)) +
geom_histogram(aes(y=..density..), alpha=0.2, col="black", position='identity') +
geom_density(alpha=0.2) +
geom_vline(data=df.pp.medians, aes(xintercept=Precursor.Pool, col=Condition), linetype="dashed", show.legend=FALSE) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") +
labs(title="Precursor Pool Distrubtion by Condition", x="Precursor Pool", y="Density") +
theme_bw()
df.pp.medians <- df.pp.medians %>%
mutate(Condition = fct_relevel(Condition, "OCon_D3", "OCR_D3", "OCon_D7", "OCR_D7", "OCon_D12", "OCR_D12", "OCon_D17", "OCR_D17"))
df.precursor.pool <- df.precursor.pool %>%
mutate(Condition = fct_relevel(Condition, "OCon_D3", "OCR_D3", "OCon_D7", "OCR_D7", "OCon_D12", "OCR_D12", "OCon_D17", "OCR_D17"))
df.areas.one.l <- df.areas.one.l %>%
mutate(Condition = fct_relevel(Condition, "OCon_D3", "OCR_D3", "OCon_D7", "OCR_D7", "OCon_D12", "OCR_D12", "OCon_D17", "OCR_D17"))
boxplot.oneleucine.percentnewsynth <- df.areas.one.l %>%
ggplot(aes(y=Perc.New.Synth, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_boxplot(aes(y=Perc.New.Synth, col=Condition, alpha=0.1)) +
labs(title="Percent Newly Sythnesized Distribution by Condition - Peptides with 1 Leucine", x="Condition", y="Percent Newly Synthesized") +
theme_bw()
# save plot
ggsave("Boxplot_percent-newly-synthesized_single-leucine-peptides.pdf",
plot = boxplot.oneleucine.percentnewsynth,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
ggsave("Boxplot_percent-newly-synthesized_single-leucine-peptides.pdf",
plot = boxplot.oneleucine.percentnewsynth,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
df.areas.one.l %>%
ggplot(aes(y=Perc.New.Synth, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_boxplot(aes(y=Perc.New.Synth, col=Condition, alpha=0.1)) +
labs(title="Percent Newly Sythnesized Distribution by Condition - Peptides with 1 Leucine", x="Condition", y="Percent Newly Synthesized") +
theme_bw()
density.groups.facet <- df.precursor.pool %>%
ggplot(aes(x=Precursor.Pool, fill=Condition)) +
geom_histogram(aes(y=..density..), alpha=0.2, col="black", position='identity') +
geom_density(alpha=0.2) +
geom_vline(data=df.pp.medians, aes(xintercept=Precursor.Pool, col=Condition), linetype="dashed", show.legend=FALSE) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") +
labs(title="Precursor Pool Distrubtion by Condition", x="Precursor Pool", y="Density") +
theme_bw()
density.groups.facet
ggsave("Density_precursor-pool.pdf",
plot = density.groups.facet,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
density.precursor.pool <- df.precursor.pool %>%
ggplot(aes(x=Precursor.Pool, fill=Condition)) +
geom_histogram(aes(y=..density..), alpha=0.2, col="black", position='identity') +
geom_density(alpha=0.2) +
geom_vline(data=df.pp.medians, aes(xintercept=Precursor.Pool, col=Condition), linetype="dashed", show.legend=FALSE) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") +
labs(title="Precursor Pool Distrubtion by Condition", x="Precursor Pool", y="Density") +
theme_bw()
ggsave("Density_precursor-pool.pdf",
plot = density.precursor.pool,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
density.percent.new.synthesized <- df.precursor.pool %>%
ggplot(aes(x=Perc.New.Synth, fill=Condition)) +
geom_histogram(aes(y=..density..), alpha=0.2, col="black", position='identity') +
geom_density(alpha=0.2) +
#geom_vline(data=df.pp.medians, aes(xintercept=Precursor.Pool, col=Condition), linetype="dashed", show.legend=FALSE) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") +
labs(title="Percent Newly Synthesized Distrubtion by Condition", x="Percent Newly Synthesized", y="Density") +
theme_bw()
ggsave("Density_percent-newly-synthesized.pdf",
plot = density.percent.new.synthesized,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
df.precursor.pool %>%
ggplot(aes(x=Precursor.Pool, y=Perc.New.Synth, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_point(aes(x=Precursor.Pool, y=Perc.New.Synth, col=Condition, alpha=0.1)) +
geom_vline(data=df.pp.medians, aes(xintercept=Precursor.Pool, col=Condition), linetype="dashed", show.legend=FALSE) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") +
labs(title="Percent New Synthesized vs. Precursor Pool", x="Precursor Pool", y="Percent New Synthesized") +
theme_bw()
df.precursor.pool %>%
ggplot(aes(y=Avg.Turnover.Score, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_boxplot(aes(y=Avg.Turnover.Score, col=Condition, alpha=0.1)) +
labs(title="Average Turnover Score Distribution by Condition", x="Condition", y="Average Turnover Score") +
theme_bw()
df.precursor.pool %>%
ggplot(aes(y=Precursor.Pool, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_boxplot(aes(y=Precursor.Pool, col=Condition, alpha=0.1)) +
labs(title="Precursor Pool Distribution by Condition", x="Condition", y="Precursor Pool") +
theme_bw()
ggsave("Boxplot_Precursor-Pool.pdf",
plot = boxplot.precursorpool,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
boxplot.precursorpool <- df.precursor.pool %>%
ggplot(aes(y=Precursor.Pool, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_boxplot(aes(y=Precursor.Pool, col=Condition, alpha=0.1)) +
labs(title="Precursor Pool Distribution by Condition", x="Condition", y="Precursor Pool") +
theme_bw()
ggsave("Boxplot_Precursor-Pool.pdf",
plot = boxplot.precursor.pool,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
boxplot.avg.turnover.score <- df.precursor.pool %>%
ggplot(aes(y=Avg.Turnover.Score, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_boxplot(aes(y=Avg.Turnover.Score, col=Condition, alpha=0.1)) +
labs(title="Average Turnover Score Distribution by Condition", x="Condition", y="Average Turnover Score") +
theme_bw()
boxplot.avg.turnover.score
ggsave("Boxplot_Average-Turnover-Score.pdf",
plot = boxplot.avg.turnover.score,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
boxplot.percent.newly.synthesized <- df.precursor.pool %>%
ggplot(aes(y=Perc.New.Synth, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_boxplot(aes(y=Perc.New.Synth, col=Condition, alpha=0.1)) +
labs(title="Percent Newly Sythnesized Distribution by Condition", x="Condition", y="Percent Newly Synthesized") +
theme_bw()
boxplot.percent.newly.synthesized
ggsave("Density_percent-newly-synthesized.pdf",
plot = boxplot.percent.newly.synthesized,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
df.precursor.pool %>%
ggplot(aes(x=Precursor.Pool, y=Perc.New.Synth, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_point(aes(x=Precursor.Pool, y=Perc.New.Synth, col=Condition, alpha=0.1)) +
geom_vline(data=df.pp.medians, aes(xintercept=Precursor.Pool, col=Condition), linetype="dashed", show.legend=FALSE) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") +
labs(title="Percent New Synthesized vs. Precursor Pool", x="Precursor Pool", y="Percent New Synthesized") +
theme_bw()
scatterplot.percent.new.synth.vs.precursor.pool <- df.precursor.pool %>%
ggplot(aes(x=Precursor.Pool, y=Perc.New.Synth, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_point(aes(x=Precursor.Pool, y=Perc.New.Synth, col=Condition, alpha=0.1)) +
geom_vline(data=df.pp.medians, aes(xintercept=Precursor.Pool, col=Condition), linetype="dashed", show.legend=FALSE) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") +
labs(title="Percent New Synthesized vs. Precursor Pool", x="Precursor Pool", y="Percent New Synthesized") +
theme_bw()
scatterplot.percent.new.synth.vs.precursor.pool
ggsave("Scatterplot_Percent-Newly-Synthesized_vs_Precursor-Pool.pdf",
plot = scatterplot.percent.new.synth.vs.precursor.pool,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
df.precursor.pool %>%
ggplot( aes(x=Avg.Turnover.Score, y=Perc.New.Synth, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_point(aes(x=Avg.Turnover.Score, y=Perc.New.Synth, col=Condition, alpha=0.1)) +
geom_hline(aes(yintercept=1)) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") + # can do fixed or free scales
labs(title="Percent New Synthesized vs. Average Turnover Score", x="Average Turnover Score", y="Percent New Synthesized") +
theme_bw()
scatterplot.percent.new.synth.vs.avg.turnover.score <- df.precursor.pool %>%
ggplot( aes(x=Avg.Turnover.Score, y=Perc.New.Synth, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_point(aes(x=Avg.Turnover.Score, y=Perc.New.Synth, col=Condition, alpha=0.1)) +
geom_hline(aes(yintercept=1)) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") + # can do fixed or free scales
labs(title="Percent New Synthesized vs. Average Turnover Score", x="Average Turnover Score", y="Percent New Synthesized") +
theme_bw()
ggsave("Scatterplot_Percent-Newly-Synthesized_vs_Avg-Turnover-Score.pdf",
plot = scatterplot.percent.new.synth.vs.avg.turnover.score,
width = 7, height = 5,
units = "in", # inches
dpi = 300)
#----------------------------------
hist(df.precursor.pool$Avg.Turnover.Score, breaks=100, main="Average Turnover Score", xlab="Average Turnover Score")
View(df)
unique(df$Condition)
View(df.precursor.pool)
unique(df.precursor.pool$Cohort)
unique(df.precursor.pool$Condition)
strsplit(unique(df.precursor.pool$Condition), fixed = "_D")
strsplit(unique(df.precursor.pool$Condition), fixed = TRUE, split = "_D")
?strsplit
strsplit(unique(df.precursor.pool$Condition), split = "_D")
strsplit(unique(df.precursor.pool$Condition), split = "D")
strsplit(x = unique(df.precursor.pool$Condition), split = "D")
strsplit(x = unique(df.precursor.pool$Condition), split = "d")
class(df.precursor.pool$Condition)
strsplit(x = as.character(unique(df.precursor.pool$Condition)), split = "D")
strsplit(x = as.character(unique(df.precursor.pool$Condition)), split = "_D")
strsplit(x = as.character(unique(df.precursor.pool$Condition)), split = "_D") %>%
unlist()
strsplit(x = as.character(unique(df.precursor.pool$Condition)), split = "_D") %>%
unlist() %>%
paste()
test <- strsplit(x = as.character(unique(df.precursor.pool$Condition)), split = "_D") %>%
unlist()
test[1]
unique(df.precursor.pool$Cohort)
unique(df.precursor.pool$Timepoint)
unique(df.precursor.pool$Timepoint) %>%
arrange()
unique(df.precursor.pool$Timepoint %>% arrange(Timepoint))
timepoints <- df.precursor.pool %>%
arrange(Timepoint) %>%
pull(Timepoint) %>%
unique()
timepoints
cohorts
cohorts <- unique(df.precursor.pool$Cohort)
paste0(cohorts, timepoints)
?paste
paste0(cohorts, timepoints, sep="_D")
paste0(cohorts, sep="_D", timepoints)
paste0(cohorts, sep="_D", timepoints)
cohorts
timepoints
i in timepoints
for(i in timepoints){
i <- timepoints[i]
print(i)
}
timepoints
for(i in timepoints){
print(i)
}
append(c(1,2), c(100))
vec.out <- c()
vec.out
i
append(vec.out, i)
vec.out
vec.out <- append(vec.out, i)
vec.out
vec.out <- c()
cohorts
paste0(cohorts, sep="_D", i)
vec.out <- c()
for(i in timepoints){
print(i)
vec.out <- append(vec.out, paste0(cohorts, sep="_D", i))
}
vec.out
conditions.relevel <- c() # initialize vector
# loop through timepoints, creating conditions.relevel vector with all cohorts along the way
for(i in timepoints){
print(i)
conditions.relevel <- append(conditions.relevel, paste0(cohorts, sep="_D", i))
}
conditions.relevel
factor(df.pp.medians$Condition)
df.pp.medians <- df.pp.medians %>%
# mutate(Condition = fct_relevel(Condition, "OCon_D3", "OCR_D3", "OCon_D7", "OCR_D7", "OCon_D12", "OCR_D12", "OCon_D17", "OCR_D17"))
mutate(Condition = fct_relevel(Condition, "OCon_D17", "OCR_D17", "OCon_D7", "OCR_D7", "OCon_D12", "OCR_D12", "OCon_D3", "OCR_D3"))
factor(df.pp.medians$Condition)
conditions.relevel
factor(df.pp.medians$Condition)
df.pp.medians <- df.pp.medians %>%
# mutate(Condition = fct_relevel(Condition, "OCon_D3", "OCR_D3", "OCon_D7", "OCR_D7", "OCon_D12", "OCR_D12", "OCon_D17", "OCR_D17"))
# mutate(Condition = fct_relevel(Condition, "OCon_D17", "OCR_D17", "OCon_D7", "OCR_D7", "OCon_D12", "OCR_D12", "OCon_D3", "OCR_D3"))
mutate(Condition = fct_relevel(Condition, conditions.relevel))
factor(df.pp.medians$Condition)
paste0(cohorts, sep="_D", timepoints)
conditions.relevel
df.pp.medians <- df.pp.medians %>%
mutate(Condition = fct_relevel(Condition, conditions.relevel))
df.precursor.pool <- df.precursor.pool %>%
mutate(Condition = fct_relevel(Condition, conditions.relevel))
df.areas.one.l <- df.areas.one.l %>%
mutate(Condition = fct_relevel(Condition, conditions.relevel))
factor(df.pp.medians$Condition)
factor(df.precursor.pool$Condition)
factor(df.areas.one.l$Condition)
df.areas.one.l %>%
ggplot(aes(y=Perc.New.Synth, fill=Condition)) + # optional: use linetype=group to use different linetypes
geom_boxplot(aes(y=Perc.New.Synth, col=Condition, alpha=0.1)) +
labs(title="Percent Newly Sythnesized Distribution by Condition - Peptides with 1 Leucine", x="Condition", y="Percent Newly Synthesized") +
theme_bw()
hist(df.precursor.pool$Avg.Turnover.Score, breaks=100, main="Average Turnover Score", xlab="Average Turnover Score")
# average turnover score filter
# between [0,1) where 1 is most stringent
# the default should be 0
ATS.threshold <- 0 # average turnover score value, used for filtering data
df.pp.ats.filtered <- df.precursor.pool %>%
filter(Avg.Turnover.Score>ATS.threshold)
df.pp.ats.filtered %>%
# mutate(Condition = fct_relevel(Condition, "OCon_D3", "OCR_D3", "OCon_D7", "OCR_D7", "OCon_D12", "OCR_D12", "OCon_D17", "OCR_D17")) %>%
mutate(Condition = fct_relevel(Condition, conditions.relevel))
ggplot(aes(x=Perc.New.Synth, fill=Condition)) +
geom_histogram(aes(y=..density..), alpha=0.2, col="black", position='identity') +
geom_density(alpha=0.2) +
#geom_vline(data=df.pp.medians, aes(xintercept=Precursor.Pool, col=Condition), linetype="dashed", show.legend=FALSE) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") +
labs(title="Percent Newly Synthesized Distrubtion by Condition", x="Percent Newly Synthesized", y="Density") +
theme_bw()
df.pp.ats.filtered %>%
# mutate(Condition = fct_relevel(Condition, "OCon_D3", "OCR_D3", "OCon_D7", "OCR_D7", "OCon_D12", "OCR_D12", "OCon_D17", "OCR_D17")) %>%
mutate(Condition = fct_relevel(Condition, conditions.relevel)) %>%
ggplot(aes(x=Perc.New.Synth, fill=Condition)) +
geom_histogram(aes(y=..density..), alpha=0.2, col="black", position='identity') +
geom_density(alpha=0.2) +
#geom_vline(data=df.pp.medians, aes(xintercept=Precursor.Pool, col=Condition), linetype="dashed", show.legend=FALSE) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") +
labs(title="Percent Newly Synthesized Distrubtion by Condition", x="Percent Newly Synthesized", y="Density") +
theme_bw()
ATS.threshold
hist(df.precursor.pool$Avg.Turnover.Score, breaks=100, main="Average Turnover Score", xlab="Average Turnover Score")
ATS.threshold <- 0.70 # average turnover score value, 70% is a typically a good starting place
df.pp.ats.filtered <- df.precursor.pool %>%
filter(Avg.Turnover.Score>ATS.threshold)
paste("Percent Newly Synthesized by Condition; Average Turnover Score >", ATS.threshold)
ATS.threshold <- 0.70
ATS.threshold
df.pp.ats.filtered %>%
# mutate(Condition = fct_relevel(Condition, "OCon_D3", "OCR_D3", "OCon_D7", "OCR_D7", "OCon_D12", "OCR_D12", "OCon_D17", "OCR_D17")) %>%
mutate(Condition = fct_relevel(Condition, conditions.relevel)) %>%
ggplot(aes(x=Perc.New.Synth, fill=Condition)) +
geom_histogram(aes(y=..density..), alpha=0.2, col="black", position='identity') +
geom_density(alpha=0.2) +
#geom_vline(data=df.pp.medians, aes(xintercept=Precursor.Pool, col=Condition), linetype="dashed", show.legend=FALSE) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") +
labs(title=paste("Percent Newly Synthesized by Condition; Average Turnover Score >", ATS.threshold) , x="Percent Newly Synthesized", y="Density") +
theme_bw()
df.pp.ats.filtered %>%
# mutate(Condition = fct_relevel(Condition, "OCon_D3", "OCR_D3", "OCon_D7", "OCR_D7", "OCon_D12", "OCR_D12", "OCon_D17", "OCR_D17")) %>%
mutate(Condition = fct_relevel(Condition, conditions.relevel)) %>%
ggplot(aes(x=Perc.New.Synth, fill=Condition)) +
geom_histogram(aes(y=..density..), alpha=0.2, col="black", position='identity') +
geom_density(alpha=0.2) +
facet_wrap(~ Condition, ncol = 2, scales = "fixed") +
labs(title=paste("Percent Newly Synthesized by Condition; Average Turnover Score >", ATS.threshold) , x="Percent Newly Synthesized", y="Density") +
theme_bw()
#------------------------------------------------------------------------------------
# PACKAGES #
packages = c("dplyr", "reshape2", "seqinr", "ggplot2", "coefplot", "plyr", "qvalue")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#------------------------------------------------------------------------------------
data.s <- read.csv("//bigrock/GibsonLab/users/Cameron/2020_0814_Skyline_Turnover_Tool/Turnover_R_scripts/Step0_Data_Output_Skyline_singleleucine_peps_test.csv", stringsAsFactors = F) #VPN
data.s <- read.csv("/Volumes/GibsonLab/users/Cameron/2020_0814_Skyline_Turnover_Tool/Turnover_R_scripts/Step0_Data_Output_Skyline_singleleucine_peps_test.csv", stringsAsFactors = F) #VPN
data.m <- read.csv("/Volumes/GibsonLab/users/Cameron/2020_0814_Skyline_Turnover_Tool/Turnover_R_scripts/Step0_Data_Output_Skyline_multileucine_peps_test.csv", stringsAsFactors = F) # mac
ATS.threshold <- 0 # average turnover score value, used for filtering data
data.m <- data.m %>%
filter(Avg.Turnover.Score>ATS.threshold)
ATS.threshold
df <- data.m %>%
bind_rows(data.s)
df <- df %>%
filter(Perc.New.Synth>0)
cohorts <- unique(df$Cohort)
# Proteins
prots <- unique(df$Protein.Accession)
# time points
time <- sort(unique(df$Timepoint))
cohorts
prots
time
unique(df$Cohort)
length(cohorts)*length(prots)
col.names <- c("Protein.Accession", "Gene", "Cohort", "No.Peptides", "No.Points", "a", "Pvalue.a", "b", "Pvalue.b", "Qvalue", "Res.Std.Error", "X.Intercept")
df.model.output <- data.frame(matrix(nrow = length(cohorts)*length(prots), ncol = length(col.names)))
names(df.model.output) <- col.names
View(df.model.output)
cohort
cohorts
?split
factor(df$Cohort)
Cohort
cohorts
test <- split(df, cohorts)
View(test)
test
test[[1]]
test[[2]]
test.1 <- test[[1]]
View(test.1)
test.2 <- test[[2]]
View(test.2)
View(test.1)
View(test.2)
View(test.1)
View(test.2)
class(cohorts)
as.factor(cohorts)
test <- split(df, as.factor(cohorts))
test.1 <- test[[1]]
test.2 <- test[[2]]
View(test.1)
View(test.2)
View(test.1)
View(test.2)
View(test.1)
View(test.2)
str(test)
X <- split(df, as.factor(cohorts))
Y <- lapply(seq_along(X), function(x) as.data.frame(X[[x]])[, 1:2])
str(Y)
Y <- lapply(seq_along(X), function(x) as.data.frame(X[[x]]))
str(Y)
X
names(Y) <- c("A", "B")
str(Y)
list2env(Y, envir = .GlobalEnv)
View(A)
View(A)
str(y)
str(Y)
View(Y)
?lapply
seq_along(X)
str(X)
names(Y)
Y <- lapply(seq_along(X), function(x) as.data.frame(X[[x]]))
names(Y)
names(Y) <- c("A", "B") # create names
names(Y)
alpha
View(X)
View(Y)
cohorts
as.factor(cohorts)
letters
LETTERS
LETTERS[1:length(cohorts)]
LETTERS[1:length(cohorts)]
length(df$Cohort=="OCon")
sum(df$Cohort=="OCon")
sum(df$Cohort=="OCR")
169+181
View(df)
Conditions <- unique(df$Condition)
X <- split(df, as.factor(Condition))
X <- split(df, as.factor(Conditions))
X <- split(df, df$Condition)
Y <- lapply(seq_along(X), function(x) as.data.frame(X[[x]]))
names(Y) <- LETTERS[1:length(cohorts)] # assign names using (the appropriate number of) capitalized letters
list2env(Y, envir = .GlobalEnv) # creates objects in the global environment
cohorts
names(Y) <- LETTERS[1:length(Conditions)] # assign names using (the appropriate number of) capitalized letters
names(Y)
list2env(Y, envir = .GlobalEnv) # creates objects in the global environment
39+39+39+52+39+52+38+52
View(A)
View(B)
View(C)
View(D)
rm(A)
rm(B)
rm(C)
rm(D)
rm(E)
rm(F)
rm(G)
rm(H)
rm(NA)
View(`NA`)
rm("NA")
X <- split(df, df$Cohort)
Y <- lapply(seq_along(X), function(x) as.data.frame(X[[x]]))
names(Y) <- LETTERS[1:length(cohorts)] # assign names using (the appropriate number of) capitalized letters
names(Y)
list2env(Y, envir = .GlobalEnv) # creates objects in the global environment
View(A)
View(B)
names(Y)
View(Y)
View(X)
View(X)
LETTERS[1:length(cohorts)]
i
names(Y)
for(j in names(Y)){
print j
}
for(j in names(Y)){
print(j)
}
